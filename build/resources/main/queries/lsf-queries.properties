# LSF SQL Queries
# This file contains named SQL queries for use with the OracleUnifiedRepository

# Common Queries
common.getSystemTimestamp = SELECT SYSTIMESTAMP FROM DUAL
common.getNextSequenceValue = SELECT ? FROM DUAL

# Authentication Queries
auth.checkUserCredentials = SELECT * FROM LSF_USERS WHERE USERNAME = :username AND STATUS = 'ACTIVE'
auth.getUserBySession = SELECT u.* FROM LSF_USERS u JOIN LSF_USER_SESSION s ON u.USER_ID = s.USER_ID WHERE s.SESSION_KEY = :sessionKey AND s.STATUS = 'ACTIVE' AND s.EXPIRY_DATE > SYSTIMESTAMP

# Application Queries
application.getApplicationStatus = SELECT * FROM LSF_APPLICATION_STATUS WHERE APPLICATION_ID = :applicationId ORDER BY CREATED_DATE DESC
application.getBlackListedApplications = SELECT * FROM LSF_MURABAH_APPLICATION WHERE IS_BLACKLISTED = 1
application.getApplicationFlow = SELECT * FROM LSF_M_APPLICATION_FLOW
application.getApplicationFlowHistory = SELECT s.*, f.LEVEL_NAME, f.DESCRIPTION FROM LSF_APPLICATION_STATUS s JOIN LSF_M_APPLICATION_FLOW f ON s.STATUS = f.LEVEL_ID WHERE s.APPLICATION_ID = :applicationId ORDER BY s.CREATED_DATE DESC

# Purchase Order Queries
purchaseOrder.getList = SELECT * FROM LSF_PURCHASE_ORDER WHERE APPLICATION_ID = :applicationId ORDER BY CREATED_DATE DESC
purchaseOrder.getById = SELECT * FROM LSF_PURCHASE_ORDER WHERE ID = :id
purchaseOrder.getApprovedApplications = SELECT * FROM LSF_MURABAH_APPLICATION WHERE STATUS = 'APPROVED' AND (:fromDate IS NULL OR CREATED_DATE >= :fromDate) AND (:toDate IS NULL OR CREATED_DATE <= :toDate)
purchaseOrder.getSymbols = SELECT * FROM LSF_PURCHASE_ORDER_SYMBOL WHERE ORDER_ID = :orderId
purchaseOrder.getInstallments = SELECT * FROM LSF_INSTALLMENTS WHERE ORDER_ID = :orderId ORDER BY INSTALLMENT_NO

# Settlement Queries
settlement.getList = SELECT * FROM LSF_SETTLEMENTS WHERE APPLICATION_ID = :applicationId ORDER BY CREATED_DATE DESC
settlement.getById = SELECT * FROM LSF_SETTLEMENTS WHERE SETTLEMENT_ID = :settlementId
settlement.getPending = SELECT * FROM LSF_SETTLEMENTS WHERE STATUS = :status ORDER BY CREATED_DATE

# Portfolio Queries
portfolio.getDetails = SELECT * FROM LSF_PORTFOLIO WHERE TRADING_ACCOUNT = :tradingAccount
portfolio.getHoldings = SELECT * FROM LSF_PORTFOLIO_HOLDINGS WHERE TRADING_ACCOUNT = :tradingAccount

# FTV Queries
ftv.getDetailedList = SELECT * FROM LSF_FTV_DETAILED_INFO WHERE 1=1 AND (:fromDate IS NULL OR TRUNC(CREATED_DATE) >= TO_DATE(:fromDate, 'DDMMYYYY')) AND (:toDate IS NULL OR TRUNC(CREATED_DATE) <= TO_DATE(:toDate, 'DDMMYYYY')) AND (:settleStatus = -1 OR SETTLEMENT_STATUS = :settleStatus)
ftv.getCollateralList = SELECT * FROM LSF_M_APPLICATION_COLLATERALS

# Commission Queries
commission.getDetails = SELECT * FROM LSF_COMMISSION_DETAILS WHERE TRUNC(CREATED_DATE) <= TO_DATE(:toDate, 'DDMMYYYY')

# Notification Queries
notification.getConfigurations = SELECT * FROM LSF_NOTIFICATION_MSG_CONFIGURATION
notification.getCustomerNotifications = SELECT * FROM LSF_WEB_NOTIFICATION WHERE CUSTOMER_ID = :customerId AND STATUS = 'UNREAD' ORDER BY CREATED_DATE DESC
notification.getHistory = SELECT * FROM LSF_NOTIFICATION WHERE CUSTOMER_ID = :customerId AND (:fromDate IS NULL OR CREATED_DATE >= TO_DATE(:fromDate, 'YYYY/MM/DD')) AND (:toDate IS NULL OR CREATED_DATE <= TO_DATE(:toDate, 'YYYY/MM/DD')) ORDER BY CREATED_DATE DESC

# Report Queries
report.getList = SELECT * FROM LSF_REPORTS WHERE USER_ID = :userId ORDER BY CREATED_DATE DESC
report.getStatus = SELECT * FROM LSF_REPORTS WHERE REPORT_ID = :reportId